<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/14/hello-world/"/>
    <url>/2020/12/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker安装zookeeper集群(附bash脚本)</title>
    <link href="/2020/12/14/docker%E5%AE%89%E8%A3%85zookeeper%E9%9B%86%E7%BE%A4-%E9%99%84bash%E8%84%9A%E6%9C%AC/"/>
    <url>/2020/12/14/docker%E5%AE%89%E8%A3%85zookeeper%E9%9B%86%E7%BE%A4-%E9%99%84bash%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<ul><li><p>准备一个文件夹并进入此文件夹， 例如</p><p><code>mkdir -p ~/docker-app/zookeeper &amp;&amp; cd ~/docker-app/zookeeper</code></p></li><li><p>准备三个文件夹并写入zookeeper的myid</p><p><code>mkdir -p zoo1/data &amp;&amp; echo 1 &gt; zoo1/data/myid</code><br><code>mkdir -p zoo2/data &amp;&amp; echo 2 &gt; zoo2/data/myid</code><br><code>mkdir -p zoo3/data &amp;&amp; echo 3 &gt; zoo3/data/myid</code>  </p></li><li><p>创建一个docker-compose.yml文件并编辑  </p><p><code>vim docker-compose.yml</code></p><p>文件内容如下:  </p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">version: &#39;3.7&#39;networks:  zk_cluster:    name: zk_cluster #为集群创建一个网络    driver: bridge#集群中的服务(3个节点)services:  zoo1:    image: zookeeper #所使用的镜像    restart: always #容器异常时是否重启    container_name: zoo1 #容器名称    ports: #与宿主机的端口映射      - 2181:2181      - 8001:8080    # zookeeper的配置    environment:      ZOO_MY_ID: 1      ZOO_SERVERS: server.1&#x3D;0.0.0.0:2888:3888;2181 server.2&#x3D;zoo2:2888:3888;2181 server.3&#x3D;zoo3:2888:3888;2181    #容器目录映射，此处使用了相对路径    volumes:      - .&#x2F;zoo1&#x2F;data:&#x2F;data      - .&#x2F;zoo1&#x2F;datalog:&#x2F;datalog    #所使用的网络    networks:      - zk_cluster  zoo2:    image: zookeeper    restart: always    container_name: zoo2    ports:      - 2182:2181      - 8002:8080    environment:      ZOO_MY_ID: 2      ZOO_SERVERS: server.1&#x3D;zoo1:2888:3888;2181 server.2&#x3D;0.0.0.0:2888:3888;2181 server.3&#x3D;zoo3:2888:3888;2181    volumes:      - .&#x2F;zoo2&#x2F;data:&#x2F;data      - .&#x2F;zoo2&#x2F;datalog:&#x2F;datalog    networks:      - zk_cluster  zoo3:    image: zookeeper    restart: always    container_name: zoo3    ports:      - 2183:2181      - 8003:8080    environment:      ZOO_MY_ID: 3      ZOO_SERVERS: server.1&#x3D;zoo1:2888:3888;2181 server.2&#x3D;zoo2:2888:3888;2181 server.3&#x3D;0.0.0.0:2888:3888;2181    volumes:      - .&#x2F;zoo3&#x2F;data:&#x2F;data      - .&#x2F;zoo3&#x2F;datalog:&#x2F;datalog    networks:      - zk_cluster</code></pre></li><li><p>使用docker-compose命令运行  </p><p><code>docker-compose --project-directory $PWD up -d</code></p></li><li><p>附：一键创建docker zookeeper集群并执行的脚本（该方案仅供参考和学习，生产环境需仔细斟酌，合理修改配置参数）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#! &#x2F;bin&#x2F;bashmkdir -p zookeeper &amp;&amp; cd zookeeperDIR&#x3D;$PWDecho &quot;cd $DIR&quot;echo &quot;create docker compose config file&quot;CONF_YML&#x3D;&#39;docker-compose.yml&#39;touch $CONF_YMLecho &quot;version: &#39;3.7&#39;&quot; &gt; $CONF_YMLNET&#x3D;&#39;zk_cluster&#39;echo &#39;networks:&#39; &gt;&gt; $CONF_YMLecho &quot;  $NET:&quot; &gt;&gt; $CONF_YMLecho &quot;    name: $NET&quot; &gt;&gt; $CONF_YMLecho &quot;    driver: bridge&quot; &gt;&gt; $CONF_YML#节点个数，可以修改此值创建任意数量的容器节点let CLUSTER_COUNT&#x3D;3 IMAGE&#x3D;zookeeperecho &quot;services:&quot; &gt;&gt; $CONF_YMLfor i in &#96;seq 1 $CLUSTER_COUNT&#96;do    echo &quot;  zoo$i:&quot; &gt;&gt; $CONF_YML    echo &quot;    image: $IMAGE&quot; &gt;&gt; $CONF_YML    echo &quot;    restart: always&quot; &gt;&gt; $CONF_YML    echo &quot;    container_name: zoo$i&quot; &gt;&gt; $CONF_YML    echo &quot;    ports:&quot; &gt;&gt; $CONF_YML    echo &quot;      - $[2180 + $i]:2181&quot; &gt;&gt; $CONF_YML    echo &quot;      - $[8000 + $i]:8080&quot; &gt;&gt; $CONF_YML    echo &quot;    environment:&quot; &gt;&gt; $CONF_YML    echo &quot;      ZOO_MY_ID: $i&quot; &gt;&gt; $CONF_YML    zk_srv_conf&#x3D;&#39;&#39;    for j in &#96;seq 1 $CLUSTER_COUNT&#96;    do        if test $i !&#x3D; $j;        then            zk_srv_conf+&#x3D;&quot;server.$j&#x3D;zoo$j:2888:3888;2181&quot;        else            zk_srv_conf+&#x3D;&quot;server.$j&#x3D;0.0.0.0:2888:3888;2181&quot;        fi        if test $j !&#x3D; $CLUSTER_COUNT;        then            zk_srv_conf+&#x3D;&#39; &#39;;        fi    done    echo &quot;      ZOO_SERVERS: $zk_srv_conf&quot; &gt;&gt; $CONF_YML    echo &quot;    volumes:&quot; &gt;&gt; $CONF_YML    echo &quot;      - .&#x2F;zoo$i&#x2F;data:&#x2F;data&quot; &gt;&gt; $CONF_YML    echo &quot;      - .&#x2F;zoo$i&#x2F;datalog:&#x2F;datalog&quot; &gt;&gt; $CONF_YML    echo &quot;    networks:&quot; &gt;&gt; $CONF_YML    echo &quot;      - $NET&quot; &gt;&gt; $CONF_YML    mkdir -p zoo$i&#x2F;data    echo $i &gt; zoo$i&#x2F;data&#x2F;myiddone# docker pull zookeeperdocker-compose --project-directory $DIR up -d</code></pre></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
